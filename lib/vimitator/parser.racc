# vim:set ft=ruby:
class Vimitator::Parser

prechigh
  nonassoc UNOT UMINUS UPLUS
  left STAR SLASH
  left PLUS MINUS
  right ASSIGN
preclow

rule

vimexpr : expr1 END
expr1 : expr2
      | expr2 QUESTION expr1 COLON expr1   {result = val}

expr2 : expr3
      | expr2 OR expr3          {result = val}

expr3 : expr4
      | expr3 AND expr4         {result = val}

expr4 : expr5
      | expr4 CMPOP expr5       {result = val}

expr5 : expr6
      | expr5 ADDOP expr6       {result = val}

ADDOP : PLUS
      | MINUS
      | CATDOT

expr6 : expr7
      | expr6 MULOP expr7       {result = val}

MULOP : MODULUS
      | SLASH
      | STAR

expr7 : expr8
      | NOT expr7     =UNOT     {result = val}
      | MINUS expr7   =UMINUS   {result = val}
      | PLUS expr7    =UPLUS    {result = val}

expr8 : expr9
      | funcrefcall
      | dictdot
      | idxrange
      | index

index       : expr8 LSQUARE expr1 RSQUARE              {result = val}
idxrange    : expr8 LSQUARE expr1 COLON expr1 RSQUARE  {result = val}
            | expr8 LSQUARE COLON expr1 RSQUARE        {result = val}
            | expr8 LSQUARE expr1 COLON RSQUARE        {result = val}
            | expr8 LSQUARE COLON RSQUARE              {result = val}
dictdot     : expr8 DICDOT word                        {result = val}
funcrefcall : expr8 LPAREN exprlist RPAREN             {result = val}
            | expr8 LPAREN RPAREN                      {result = val}

expr9 : NUMBER
      | FLOAT
      | funccall
      | variable
      | REGISTER
      | ENVVAR
      | list
      | OPTION
      | dictionary
      | SQSTRING
      | DQSTRING
      | nested

nested       : LPAREN expr1 RPAREN            {result = val}
dictionary   : LCURLY dictlist RCURLY         {result = val}
             | LCURLY RCURLY                  {result = val}
dictlist     : dictitem
             | dictlist COMMA dictitem        {result = val}
dictitem     : expr1 COLON expr1              {result = val}
list         : LSQUARE exprlist RSQUARE       {result = val}
             | LSQUARE RSQUARE                {result = val}
funccall     : ident LPAREN exprlist RPAREN   {result = val}
             | ident LPAREN RPAREN            {result = val}
exprlist     : expr1
             | exprlist COMMA expr1           {result = val}
variable     : ident
ident        : startofident
             | ident NAMESPACE                {result = val}
             | ident NUMBER                   {result = val}
             | ident HASH                     {result = val}
             | ident startofident             {result = val}
             # ^-- these don't look right  XXX
word         : HEAD
             | word NUMBER                    {result = val}
             | word HEAD                      {result = val}
             # ^-- that doesn't look right  XXX
startofident : braceident
             | HEAD
braceident   : LCURLY expr1 RCURLY            {result = val}
number       : NUMBER
             | FLOAT
string       : DQSTRING
             | SQSTRING

end

---- inner ----
  def parse(tokens)
    @yydebug = true
    @tokens = tokens
    do_parse
  end

  #def on_error( *args )
  #  $stderr.puts "on_error called: args=#{args.inspect}"
  #end

  def next_token
    token = @tokens.shift
    #puts "Token: #{token.inspect}"
    token
  end

