# vim:set ft=ruby:
class Vim::Parser

rule

vimexpr : expr1 END
expr1 : expr2
      | expr2 space question expr1 space colon expr1

expr2 : expr3
      | expr2 space or expr3

expr3 : expr4
      | expr3 space and expr4

expr4 : expr5
      | expr4 space compare expr5

expr5 : expr6
      | expr5 space expr5op expr6

expr5op : plus
        | minus
        | dot

expr6 : expr7
      | expr6 space expr6op expr7

expr6op : mod
        | slash
        | star

expr7 : expr8
      | not expr7
      | minus expr7
      | plus expr7

expr8 : expr9
      | funcrefcall
      | dictdot
      | idxrange
      | index

index       : expr8 lsquare expr1 RSQUARE
idxrange    : expr8 lsquare expr1 space colon expr1 RSQUARE
            | expr8 lsquare colon expr1 RSQUARE
            | expr8 lsquare expr1 space colon RSQUARE
            | expr8 lsquare colon RSQUARE
dictdot     : expr8 DOT word
funcrefcall : expr8 space lparen exprlist RPAREN
            | expr8 space lparen RPAREN

expr9 : NUMBER
      | FLOAT
      | funccall
      | variable
      | REGISTER
      | ENVVAR
      | list
      | OPTION
      | dictionary
      | SQSTRING
      | DQSTRING
      | nested

nested       : lparen expr1 RPAREN
dictionary   : lcurly dictlist RCURLY
             | lcurly RCURLY
dictlist     : dictitem
             | dictlist comma dictitem
dictitem     : expr1 space colon expr1 space
list         : lsquare exprlist RSQUARE
             | lsquare RSQUARE
funccall     : ident space lparen exprlist RPAREN
             | ident space lparen RPAREN
exprlist     : expr1 space
             | exprlist comma expr1 space
variable     : ident
ident        : startofident
             | ident NAMESPACE
             | ident NUMBER
             | ident HASH
             | ident startofident
word         : HEAD
             | word NUMBER
             | word HEAD
startofident : braceident
             | HEAD
braceident   : lcurly expr1 RCURLY
number       : NUMBER space
             | FLOAT space
register     : REGISTER space
option       : OPTION space
envvariable  : ENVVAR space
string       : DQSTRING space
             | SQSTRING space
compare      : COMPARE space
lparen       : LPAREN space
rparen       : RPAREN space
lcurly       : LCURLY space
rcurly       : RCURLY space
lsquare      : LSQUARE space
rsquare      : RSQUARE space
comma        : COMMA space
colon        : COLON space
not          : NOT space
and          : AND space
or           : OR space
plus         : PLUS space
minus        : MINUS space
star         : STAR space
mod          : MODULE space
space        : # Empty
             | space WHITE
end

---- inner ----
  def parse(tokens)
    @yydebug = true
    @tokens = tokens
    do_parse
  end

  #def on_error( *args )
  #  $stderr.puts "on_error called: args=#{args.inspect}"
  #end

  def next_token
    token = @tokens.shift
    #puts "Token: #{token.inspect}"
    token
  end

