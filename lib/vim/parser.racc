# vim:set ft=ruby:
class Vim::Parser

rule

vimexpr : expr1 END
expr1 : expr2
      | expr2 question expr1 colon expr1

expr2 : expr3
      | expr2 or expr3

expr3 : expr4
      | expr3 and expr4

expr4 : expr5
      | expr4 compare expr5

expr5 : expr6
      | expr5 expr5op expr6

expr5op : plus
        | minus
        | dot

expr6 : expr7
      | expr6 expr6op expr7

expr6op : mod
        | slash
        | star

expr7 : expr8
      | not expr7
      | minus expr7
      | plus expr7

expr8 : expr9
      | funcrefcall
      | dictdot
      | idxrange
      | index

index       : expr8 lsquare expr1 RSQUARE
idxrange    : expr8 lsquare expr1 colon expr1 RSQUARE
            | expr8 lsquare colon expr1 RSQUARE
            | expr8 lsquare expr1 colon RSQUARE
            | expr8 lsquare colon RSQUARE
dictdot     : expr8 DOT word
funcrefcall : expr8 lparen exprlist RPAREN
            | expr8 lparen RPAREN

expr9 : NUMBER
      | FLOAT
      | funccall
      | variable
      | REGISTER
      | ENVVAR
      | list
      | OPTION
      | dictionary
      | SQSTRING
      | DQSTRING
      | nested

nested       : lparen expr1 RPAREN
dictionary   : lcurly dictlist RCURLY
             | lcurly RCURLY
dictlist     : dictitem
             | dictlist comma dictitem
dictitem     : expr1 colon expr1
list         : lsquare exprlist RSQUARE
             | lsquare RSQUARE
funccall     : ident lparen exprlist RPAREN
             | ident lparen RPAREN
exprlist     : expr1
             | exprlist comma expr1
variable     : ident
ident        : startofident
             | ident NAMESPACE
             | ident NUMBER
             | ident HASH
             | ident startofident
word         : HEAD
             | word NUMBER
             | word HEAD
startofident : braceident
             | HEAD
braceident   : lcurly expr1 RCURLY
number       : NUMBER
             | FLOAT
register     : REGISTER
option       : OPTION
envvariable  : ENVVAR
string       : DQSTRING
             | SQSTRING
compare      : COMPARE
lparen       : LPAREN
rparen       : RPAREN
lcurly       : LCURLY
rcurly       : RCURLY
lsquare      : LSQUARE
rsquare      : RSQUARE
comma        : COMMA
colon        : COLON
not          : NOT
and          : AND
or           : OR
plus         : PLUS
minus        : MINUS
star         : STAR
mod          : MODULE

end

---- inner ----
  def parse(tokens)
    @yydebug = true
    @tokens = tokens
    do_parse
  end

  #def on_error( *args )
  #  $stderr.puts "on_error called: args=#{args.inspect}"
  #end

  def next_token
    token = @tokens.shift
    #puts "Token: #{token.inspect}"
    token
  end

