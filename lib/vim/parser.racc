# vim:set ft=ruby:
class Vim::Parser

rule

vimexpr : expr END
# This is a dummy non-terminal necessary until we write expr1
expr : expr7

expr7 : expr8
      | not expr7
      | minus expr7
      | plus expr7

expr8 : expr9
      | funcrefcall
      | dictdot
      | idxrange
      | index

index : expr8 lsquare expr RSQUARE
idxrange : expr8 lsquare expr space colon expr RSQUARE
         | expr8 lsquare colon expr RSQUARE
         | expr8 lsquare expr space colon RSQUARE
         | expr8 lsquare colon RSQUARE
dictdot : expr8 DOT word
funcrefcall : expr8 space lparen exprlist RPAREN
            | expr8 space lparen RPAREN

expr9 : NUMBER
      | FLOAT
      | funccall
      | variable
      | REGISTER
      | ENVVAR
      | list
      | OPTION
      | dictionary
      | SQSTRING
      | DQSTRING
      | nested

nested : lparen expr RPAREN
dictionary : lcurly dictlist RCURLY
           | lcurly RCURLY
dictlist : dictitem
         | dictlist comma dictitem
dictitem : expr space colon expr space
list : lsquare exprlist RSQUARE
     | lsquare RSQUARE
funccall : ident space lparen exprlist RPAREN
         | ident space lparen RPAREN
exprlist : expr space
         | exprlist comma expr space
variable : ident
ident : startofident
      | ident NAMESPACE
      | ident NUMBER
      | ident HASH
      | ident startofident
word : HEAD
     | word NUMBER
     | word HEAD
startofident : braceident
             | HEAD
braceident : lcurly expr RCURLY
number : NUMBER space
       | FLOAT space
register : REGISTER space
option : OPTION space
envvariable : ENVVAR space
string : DQSTRING space
       | SQSTRING space
lparen : LPAREN space
rparen : RPAREN space
lcurly : LCURLY space
rcurly : RCURLY space
lsquare : LSQUARE space
rsquare : RSQUARE space
comma : COMMA space
colon : COLON space
not : NOT space
and : AND space
or : OR space
plus : PLUS space
minus : MINUS space
star : STAR space
mod : MODULE space
space : # Empty
      | space WHITE
end

---- inner ----
  def parse(tokens)
    @yydebug = true
    @tokens = tokens
    do_parse
  end

  #def on_error( *args )
  #  $stderr.puts "on_error called: args=#{args.inspect}"
  #end

  def next_token
    token = @tokens.shift
    #puts "Token: #{token.inspect}"
    token
  end

